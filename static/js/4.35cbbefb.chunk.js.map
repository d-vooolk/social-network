{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Meassage/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","dialogsStyle","dialog","active","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","key","messagesElements","messages","dialogsItem","values","sendMessageCreator","newMessageBody","compose","dispatch","newMessgeBody"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sICG7MC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,4JAGvC,WACI,OAAKC,KAAKC,MAAMN,OAET,kBAACG,EAAcE,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAI,eAJV,GAEXC,IAAML,WAUtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,+FCL9DM,EATE,SAACJ,GACd,IAAIK,EAAO,aAAeL,EAAMM,GAChC,OACI,yBAAKC,UAAWC,IAAaC,OAAS,IAAMD,IAAaE,QACrD,kBAAC,IAAD,CAAST,GAAII,GAAb,IAAqBL,EAAMW,KAA3B,OCEGC,EAND,SAACZ,GACX,OACI,yBAAKO,UAAWC,IAAaK,SAA7B,IAAwCb,EAAMa,QAA9C,M,wCC8BR,IAAMC,EAAcC,YAAiB,IAgB/BC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAdL,SAACjB,GACpB,OACI,0BAAMmB,SAAUnB,EAAMoB,cAClB,kBAACC,EAAA,EAAD,CACIC,UAAWC,IACXZ,KAAM,iBACNa,YAAa,qBACbC,SAAU,CAACC,IAAUZ,KAEzB,6BAAK,6CASFa,EA9Cf,SAAiB3B,GAEb,IAAIP,EAAQO,EAAM4B,YAEdC,EAAkBpC,EAAMqC,QAAQC,KAAI,SAAAtB,GAAM,OAAI,kBAAC,EAAD,CAAYE,KAAMF,EAAOE,KAAMqB,IAAKvB,EAAOH,GAAIA,GAAIG,EAAOH,QACxG2B,EAAmBxC,EAAMyC,SAASH,KAAI,SAAAlB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASmB,IAAKnB,EAAQP,GAAIA,GAAIO,EAAQP,QAOrH,OAAKN,EAAMN,OAGP,yBAAKa,UAAWC,IAAasB,SACzB,yBAAKvB,UAAWC,IAAa2B,aAA7B,IAA4CN,EAA5C,KACA,yBAAKtB,UAAWC,IAAa0B,UACzB,iCAAOD,EAAP,MAGJ,kBAACjB,EAAD,CAAqBG,SAbT,SAACiB,GACjBpC,EAAMqC,mBAAmBD,EAAOE,oBAGV,kBAAC,IAAD,CAAUrC,GAAI,Y,wBCG7BsC,sBACXpC,aAlBkB,SAACV,GACnB,MAAO,CACHmC,YAAanC,EAAMmC,gBAIF,SAACY,GACtB,MAAO,CAEHH,mBAAoB,SAACI,GACjBD,EAASH,YAAmBI,SASpC7C,IAFW2C,CAGbZ","file":"static/js/4.35cbbefb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItem\":\"Dialogs_dialogsItem__8wYI2\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\n\n            return <Component {...this.props} />\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}\n\n","import dialogsStyle from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport React from 'react';\n\nlet DialogItem = (props) => {\n    let path = '/messages/' + props.id\n    return (\n        <div className={dialogsStyle.dialog + ' ' + dialogsStyle.active}>\n            <NavLink to={path}> {props.name} </NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem;","import dialogsStyle from \"../Dialogs.module.css\";\nimport React from 'react';\n\n\nlet Message = (props) => {\n    return (\n        <div className={dialogsStyle.message}> {props.message} </div>\n    )\n}\n\nexport default Message;","import dialogsStyle from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Meassage/Message\";\nimport {Redirect} from \"react-router-dom\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport React from 'react';\n\n\nfunction Dialogs(props) {\n\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>);\n    let messagesElements = state.messages.map(message => <Message message={message.message} key={message.id} id={message.id}/>);\n\n\n    let addNewMessage = (values) => {\n        props.sendMessageCreator(values.newMessageBody);\n    }\n\n    if (!props.isAuth) return <Redirect to={'/Login'} />;\n\n    return (\n        <div className={dialogsStyle.dialogs}>\n            <div className={dialogsStyle.dialogsItem}> {dialogsElements} </div>\n            <div className={dialogsStyle.messages}>\n                <div> {messagesElements} </div>\n            </div>\n\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\n        </div>\n    );\n}\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field\n                component={Textarea}\n                name={'newMessageBody'}\n                placeholder={'Enter your message'}\n                validate={[required, maxLength50]}\n            />\n            <div><button>send</button></div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm({\n    form: 'dialogAddMessageForm'\n})(AddMessageForm);\n\nexport default Dialogs;","import {sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n\n        sendMessageCreator: (newMessgeBody) => {\n            dispatch(sendMessageCreator(newMessgeBody));\n        }\n\n    }\n}\n\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);"],"sourceRoot":""}